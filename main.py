# -*- coding: utf-8 -*-

"""
代码主要用于理解基本推荐系统的构建方法
本代码只是一个demo，由于数据量大，不适合单机练习使用，准确率为0也为正常结果
raw data: https://www.kaggle.com/netflix-inc/netflix-prize-data
"""

import os
import json
import random
import math


class FirstRec:
    def __init__(self, file_path, seed, k, n_items):
        """初始化函数
        Args:
            file_path: 数据集路径
            seed: 随机种子
            k: 选取的近邻用户个数
            n_items: 为每个用户推荐的电影数
        """
        self.file_path = file_path
        self.seed = seed
        self.k = k
        self.n_items = n_items
        self.users_1000 = ['2132711', '2624638', '440200', '1012254', '1337758', '2390157', '19084', '1727009', '1615957', '2023312', '2385970', '174415', '1578940', '1367538', '2097957', '1396171', '2103907', '2463617', '464930', '2326096', '860093', '2502616', '1377400', '1691529', '1819879', '1798883', '1240555', '82771', '1634870', '2141865', '1579907', '1123022', '1513101', '2399790', '43439', '312986', '414838', '261800', '2443503', '2513126', '558574', '1401982', '175641', '1678779', '1697635', '1966640', '2569763', '1518994', '152193', '782651', '1730160', '1650518', '2113807', '173581', '1010590', '752320', '1781337', '722912', '2632901', '1919084', '2379877', '1569524', '1268225', '2375684', '491965', '1939302', '416010', '619967', '1307266', '1159471', '1541112', '2461672', '725230', '2300044', '1006158', '73054', '1267490', '2222062', '504638', '2185380', '335387', '1911801', '537245', '73403', '342347', '1295393', '1008866', '925298', '59410', '1759015', '1621816', '818453', '1453982', '830599', '1320551', '1396849', '399544', '1479047', '2478431', '1231909', '428408', '905231', '1633863', '1998367', '930537', '899378', '1901906', '2241210', '1128419', '2584166', '718954', '2345199', '1125370', '931613', '1485477', '1095446', '1482721', '2487603', '1661306', '1119981', '887440', '2288456', '1880486', '19515', '1795384', '1038521', '2052448', '1952347', '108068', '1578210', '1969269', '375597', '2070271', '987719', '1656390', '446485', '2286807', '2322109', '990080', '1790736', '129182', '1733017', '526947', '306600', '2279669', '737603', '2032800', '2251062', '990116', '480835', '1191253', '391101', '2426596', '127063', '362856', '2356274', '735928', '914164', '443988', '261204', '2585065', '927712', '169771', '1344356', '231394', '843387', '339363', '2402687', '97391', '1234413', '1078512', '157761', '92577', '2301695', '290875', '258717', '1874051', '2192782', '1813484', '2578188', '2227089', '1014679', '1391762', '1159227', '1174780', '390375', '528083', '2203337', '1056248', '1738298', '443096', '1162879', '2178302', '458259', '2024558', '309783', '1485699', '1303746', '1852607', '1267897', '1003463', '1855373', '1526264', '1348700', '554208', '2211561', '1013993', '214784', '1659083', '906177', '1303181', '886628', '2366741', '526255', '352062', '902618', '1954618', '2439055', '396241', '1605459', '2235387', '1098887', '1773207', '539278', '1150754', '2646617', '1576686', '2470805', '503179', '2592254', '1701634', '1413756', '1556924', '87115', '2275799', '333036', '337517', '2535150', '548306', '258840', '1518604', '820793', '1678695', '2036496', '1226840', '913453', '904965', '1366454', '1123230', '1029622', '513930', '820056', '364780', '1765645', '856423', '1904298', '1432564', '2556038', '2236631', '784181', '1529346', '1655276', '2215777', '2496538', '1351688', '389280', '1428915', '929132', '2434312', '2521766', '1806913', '314180', '2083299', '2211209', '2442293', '1029287', '1315645', '1409051', '1420929', '1629712', '277015', '286943', '2211728', '1166266', '102071', '514922', '1048912', '213183', '1356654', '1878773', '492470', '188514', '2595166', '1912462', '2215333', '2286229', '1795059', '544', '1076658', '2095919', '2235132', '183098', '1086213', '2224294', '1206102', '1183208', '389225', '736654', '997090', '809426', '276813', '2141362', '2360013', '2130370', '2080006', '1472304', '350351', '480561', '1179238', '852660', '565078', '1057826', '345543', '1196292', '2266937', '2367035', '1813909', '1796217', '1996237', '1560846', '980885', '332818', '171241', '559330', '417592', '2312936', '1010288', '2396850', '1198431', '1594851', '2407249', '67120', '1419978', '1009784', '831755', '308307', '129151', '1640805', '1225045', '1017783', '682464', '524152', '845722', '1968299', '674840', '605762', '15324', '2192251', '2232676', '876210', '1083190', '2414794', '1896490', '2134637', '876268', '2434526', '488893', '1814588', '1865632', '740008', '2289597', '877839', '351834', '1355735', '2558756', '869993', '417036', '1466332', '1823184', '849919', '1260373', '1427629', '2067339', '420416', '1464835', '543504', '154989', '527665', '1602785', '1769638', '1399105', '1832494', '2535989', '2418771', '1898882', '600416', '2140213', '2293747', '425512', '2446516', '2141533', '165146', '667203', '1654323', '333573', '1564482', '1282325', '1571299', '2205042', '240150', '421842', '1084285', '1269496', '890667', '494486', '1345814', '1323419', '1765559', '2423898', '193146', '2222863', '1322141', '715407', '1458479', '1198015', '922278', '2468830', '1413871', '2530469', '573812', '1308620', '2378774', '1034663', '2184727', '801513', '646180', '2366930', '2065059', '1698611', '1516370', '2133109', '1505715', '784349', '1451504', '2026363', '504689', '1493929', '1970128', '787230', '2065100', '2195823', '766025', '952181', '402669', '209999', '667059', '2037390', '2539864', '1896239', '1630360', '1824144', '2186097', '468806', '74949', '2328004', '2235196', '2433583', '2006012', '2359212', '366530', '1029192', '1144165', '1440448', '1375036', '2279037', '299269', '2436387', '1160848', '2518103', '48031', '232148', '2048085', '350801', '712991', '1410473', '1372792', '2411001', '289217', '625370', '998802', '2331520', '1477636', '1145785', '1111298', '2535353', '2305590', '1567571', '2135471', '302625', '148491', '2205601', '707527', '755078', '2324712', '2418566', '2572558', '786523', '1514488', '433110', '1756025', '1215832', '1939397', '1719316', '973899', '359779', '2478371', '275239', '152086', '1764105', '876276', '1474335', '376884', '987211', '2460306', '2317620', '410607', '2368348', '819098', '770004', '1104138', '1848279', '559912', '178685', '2315927', '858432', '1609527', '1432352', '2050510', '666531', '1245529', '2161619', '1235288', '2614047', '5652', '1072585', '2428390', '1519184', '863778', '418161', '813174', '1017179', '2597342', '1139868', '1625495', '2209321', '618059', '805980', '1138434', '92460', '355766', '1262415', '1026969', '1953510', '902299', '338522', '1323717', '304', '2204122', '778882', '860235', '726926', '512598', '410769', '988355', '663703', '2358651', '178217', '1767544', '95748', '1456866', '1694059', '1513271', '1699177', '1034571', '1911053', '2642149', '1563141', '1864921', '2336827', '536253', '1672105', '1699936', '139012', '669876', '946667', '2248632', '2330399', '331946', '1801018', '957143', '1175826', '2116498', '717284', '2599812', '2036824', '2528897', '1364364', '1355171', '2583746', '771940', '331483', '1415102', '2358069', '1132168', '551599', '2319568', '2574384', '543278', '170191', '153596', '1952494', '2457710', '325372', '508174', '562344', '2631932', '2492620', '276860', '1698384', '963119', '1268997', '1080998', '1689939', '1386167', '2433150', '1228735', '2244864', '2177714', '449101', '2155560', '889021', '302223', '1225584', '92047', '1964258', '1914711', '1448861', '324347', '1095539', '2416135', '730266', '1494507', '1199558', '292677', '1453342', '746462', '2292398', '1058178', '1034433', '524358', '1370191', '1337532', '988924', '818375', '2028504', '417673', '974614', '693057', '1314512', '1152819', '730439', '2201601', '1273465', '783012', '1569860', '2560168', '358233', '156796', '947349', '1205597', '524402', '315246', '1936257', '1393308', '1339209', '1472717', '771081', '1987526', '2595219', '1083252', '1075369', '2325961', '306130', '17808', '2542819', '954247', '2048583', '185443', '1859106', '213220', '84947', '1078168', '1276024', '2086490', '395996', '1674842', '1920435', '1615050', '414614', '2092883', '96397', '848251', '1469820', '255740', '2431288', '607183', '399518', '1940011', '11760', '1275360', '1998495', '2449740', '1448075', '2629738', '228337', '1879922', '889173', '1950372', '1011777', '978306', '1159717', '1058522', '2122996', '781020', '227396', '114761', '1141024', '910927', '1742849', '1863226', '331641', '1432224', '104113', '355303', '2360154', '1939333', '878307', '306985', '1858094', '425920', '112153', '1548196', '548632', '1755262', '604758', '2397138', '1101215', '288061', '2404677', '2552425', '2507038', '2296139', '1350381', '2180922', '2058632', '1787092', '760387', '37609', '1970404', '1339054', '2252147', '1710213', '301708', '1212509', '1863925', '2219898', '1649846', '1538617', '167337', '1594135', '1418218', '934042', '1514635', '273975', '821414', '2338015', '1570434', '2299525', '1833935', '1866487', '127771', '367420', '1073542', '2226994', '639431', '2322990', '1800794', '936398', '668375', '2587746', '1905293', '346446', '2301582', '1499122', '452554', '2453371', '1533521', '344170', '275986', '1277635', '691272', '2366277', '274970', '53039', '516377', '2338924', '915216', '2504244', '1490349', '2620565', '2533279', '2040195', '950524', '2420021', '1509146', '2101318', '208978', '1124974', '1463246', '2596401', '1476980', '555324', '1234407', '1906666', '1691232', '1393327', '2643009', '780746', '5022', '809737', '139255', '2364213', '1570571', '1511417', '847867', '919394', '1886864', '193052', '1597668', '1185071', '2076798', '931227', '866189', '2584523', '2305051', '58161', '1061965', '2595955', '1024854', '190779', '2162054', '1253350', '1831995', '1562541', '566050', '652654', '549473', '24796', '712071', '1576420', '952787', '2605004', '1415311', '368816', '1685718', '2189383', '908325', '1317771', '1277612', '963094', '1726505', '1442788', '943983', '1137186', '2588586', '2173519', '387487', '1019670', '694921', '1065836', '348160', '180843', '655546', '1668350', '417386', '1622100', '1174339', '15299', '1825841', '393212', '1092610', '1733617', '1895663', '2234691', '2294583', '1246069', '2449608', '2530328', '807954', '1598358', '1297944', '182875', '2028599', '1309978', '2185307', '2010528', '320909', '2531352', '2318948', '918990', '302748', '2189038', '1912755', '116876', '238981', '2100462', '1563783', '693353', '2013164', '1269848', '1625634', '777795', '2339496', '545714', '1806118', '1575152', '1673308', '99063', '187484', '1369796', '984021', '552483', '904400', '1423089', '2639043', '1738544', '268350', '1571706', '1163821', '1771264', '1823074', '1623698', '901019', '776298', '135275', '112549', '653027', '268312', '1092252', '2270835', '119541', '989124', '1594535', '414975', '2628628', '2229864', '2509439', '1252960', '1881112', '1895114', '1892518', '1721218', '2284477', '1079283', '208264', '317314', '1444819', '2034032', '2119917', '611729', '2646917', '864955', '576459', '1367164', '770129', '509643', '76924', '1484716', '244246', '2394150', '1431253', '2424096', '2547993', '2624116', '366296', '143267', '605908', '582958', '99206', '1247290']
        # self.users_1000 = self.__select_1000_users()
        self.train, self.test = self._load_and_split_data()

    def __select_1000_users(self):
        print("随机选取1000个用户！")
        if os.path.exists("data/train.json") and os.path.exists("data/test.json"):
            return list()
        else:
            users = set()
            # 获取所有用户
            for file in os.listdir(self.file_path):
                one_path = "{}/{}".format(self.file_path, file)
                print("{}".format(one_path))
                with open(one_path, 'r') as fp:
                    for line in fp.readlines():
                        if line.strip().endswith(":"):
                            continue
                        else:
                            user_id, _, _ = line.split(",")
                            users.add(user_id)
            random.seed(self.seed)
            users_1000 = random.sample(list(users), 1000)
            print(users_1000)
            return users_1000

    def _load_and_split_data(self):
        train = dict()
        test = dict()
        if os.path.exists("data/train.json") and os.path.exists("data/test.json"):
            print("从文件中加载训练集和测试集")
            with open("data/train.json", 'r') as f:
                train = json.load(f)
            with open('data/test.json', 'r') as f:
                test = json.load(f)
        else:
            # 设置随机种子，保证train和test的值每次都一致
            random.seed(self.seed)
            for file in os.listdir(self.file_path):
                one_path = '{}/{}'.format(self.file_path, file)
                print(one_path)
                with open(one_path, 'r') as f:
                    movie_id = f.readline().split(':')[0]
                    for line in f.readlines():
                        if line.strip().endswith(':'):
                            movie_id = line.split(':')[0]
                        else:
                            user_id, rate, _ = line.split(',')
                        # 判断用户是否在所选的1000个用户中
                        if user_id in self.users_1000:
                            print(user_id)
                            # 随机选取5%用户作为测试集
                            if random.randint(1, 50) == 1:
                                test.setdefault(user_id, {})[movie_id] = int(rate)
                            else:
                                train.setdefault(user_id, {})[movie_id] = int(rate)
            print("加载数据到 data/train.json 和 data/test.json")
            with open("data/train.json", 'w') as f:
                json.dump(train, f)
            with open("data/test.json", 'w') as f:
                json.dump(test, f)
            print('加载数据完成')
        return train, test

    def pearson(self, rating1, rating2):
        """计算皮尔逊相关系数

        rating 形如：{'movie_id1': rate1, ...}
        """
        sum_xy = 0
        sum_x = 0
        sum_y = 0
        sum_x2 = 0
        sum_y2 = 0
        num = 0
        for key in rating1.keys():
            if key in rating2.keys():
                num += 1
                x = rating1[key]
                y = rating2[key]
                sum_xy += x * y
                sum_x += x
                sum_y += y
                sum_x2 += math.pow(x, 2)
                sum_y2 += math.pow(y, 2)
        if num == 0:
            return 0
        # 皮尔逊相关系数分母
        denominator = math.sqrt(sum_x2 - math.pow(sum_x, 2) / num) * math.sqrt(sum_y2 - math.pow(sum_y, 2) / num)
        if denominator == 0:
            return 0
        else:
            return (sum_xy - (sum_x * sum_y) / num) / denominator

    def recommend(self, user_id):
        """用户user_id进行电影推荐"""
        neighbor_user = dict()
        for user in self.train.keys():
            if user_id != user:
                distance = self.pearson(self.train[user_id], self.train[user])
                neighbor_user[user] = distance
        # 按照第二个参数用户的皮尔逊相关系数排序
        new_nu = sorted(neighbor_user.items(), key=lambda k: k[1], reverse=True)

        movies = dict()
        for (sim_user, sim) in new_nu[:self.k]:
            for movie_id in self.train[sim_user].keys():
                # 获取推荐分数
                movies.setdefault(movie_id, 0)
                movies[movie_id] += sim * self.train[sim_user][movie_id]

        new_movies = sorted(movies.items(), key=lambda k: k[1], reverse=True)
        return new_movies

    def evaluate(self, num=30):
        """推荐系统效果评估函数

        num: 随机抽取num个用户计算准确率
        """
        print("开始计算准确度")
        precisions = list()
        random.seed(10)
        for user_id in random.sample(self.test.keys(), num):
            hit = 0
            result = self.recommend(user_id)[:self.n_items]
            for (item, rate) in result:
                if item in self.test[user_id]:
                    hit += 1
                    precisions.append(hit/self.n_items)
            return sum(precisions) / precisions.__len__() if len(precisions) != 0 else 0


if __name__ == '__main__':
    file_path = './data/combined_data'
    seed = 30
    k = 50
    n_items = 50
    eval_num = 50
    recommender = FirstRec(file_path, seed, k, n_items)
    # result = recommender.recommend("1440448")
    # print(result)
    print("算法准确率: ", recommender.evaluate(eval_num))
